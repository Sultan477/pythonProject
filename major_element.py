# Вам дан массив nums длины n.
# Назовем главным элементом тот элемент массива, который встречается больше либо равно n // 2 раз
# (если не делится нацело, округление вниз).
# Считая, что в массиве nums гарантировано будет главный элемент, напишите функцию maj_element(nums),
# которая будет возвращать этот элемент.
#
# Примеры:
#
# nums = [3, 5, 5, 1] даст 5
# nums = [0, 1, 1, 1, 0, 0, 0, 0] даст 0

'''Для решения этой задачи можно воспользоваться алгоритмом МУЖ (Majority Element Voting Algorithm). Этот алгоритм позволяет найти главный элемент в массиве за линейное время и константную дополнительную память.
В основе алгоритма лежит идея подсчета голосов. Мы будем поддерживать две переменные: candidate и count. Проходим по массиву и для каждого элемента увеличиваем count, если он равен candidate, и уменьшаем count, если он отличается от candidate. Если count становится равным 0, то мы выбираем текущий элемент в качестве нового кандидата.
В итоге, после прохода по всем элементам, candidate будет содержать главный элемент.'''

def maj_element(nums):
    candidate = None
    count = 0

    for num in nums:
        if count == 0:
            candidate = num
            count = 1
        elif num == candidate:
            count += 1
        else:
            count -= 1

    count = 0
    for num in nums:
        if num == candidate:
            count += 1

    if count >= len(nums) // 2:
        return candidate
    else:
        return None

# if __name__ =='__main__':
#
#     print(maj_element([3, 5, 5, 1]))
#     print(maj_element([0, 1, 1, 1, 0, 0, 0, 0]))
#     print(maj_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
